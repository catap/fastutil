/*
 * Copyright (C) 2002-2023 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package PACKAGE;

/** A type-specific {@link Iterable} that further strengthens the specification of {@link it.unimi.dsi.fastutil.BidirectionalIterator#iterator()}.
 */
public interface KEY_MOVE_BIDI_ITERABLE KEY_GENERIC extends KEY_BIDI_ITERABLE KEY_GENERIC {

	/** Returns a type-specific {@link it.unimi.dsi.fastutil.MovableBidirectionalIterator}
	 * on the elements in this set, starting from a given element of the domain (optional operation).
	 *
	 * <p>This method returns a type-specific movable bidirectional iterator with given
	 * starting point. The starting point is any element comparable to the
	 * elements of this set (even if it does not actually belong to the
	 * set). The next element of the returned iterator is the least element of
	 * the set that is greater than the starting point (if there are no
	 * elements greater than the starting point, {@link
	 * it.unimi.dsi.fastutil.MovableBidirectionalIterator#hasNext() hasNext()} will return
	 * {@code false}). The previous element of the returned iterator is
	 * the greatest element of the set that is smaller than or equal to the
	 * starting point (if there are no elements smaller than or equal to the
	 * starting point, {@link it.unimi.dsi.fastutil.BidirectionalIterator#hasPrevious()
	 * hasPrevious()} will return {@code false}).
	 *
	 * <p>Note that passing the last element of the set as starting point and
	 * calling {@link it.unimi.dsi.fastutil.MovableBidirectionalIterator#previous() previous()}
	 * you can traverse the entire set in reverse order.
	 *
	 * @param fromElement an element to start from.
	 * @return a movable bidirectional iterator on the element in this set, starting at the given element.
	 * @throws UnsupportedOperationException if this set does not support iterators with a starting point.
	 */

	KEY_MOVE_BIDI_ITERATOR KEY_GENERIC iterator(final KEY_GENERIC_TYPE fromElement);

	/** Returns a type-specific {@link it.unimi.dsi.fastutil.MovableBidirectionalIterator}
	 * on the elements in this set.
	 *
	 * <p>This method returns a parameterised movable bidirectional iterator. The iterator
	 * can be moreover safely cast to a type-specific iterator.
	 *
	 * @apiNote This specification strengthens the one given in the corresponding type-specific
	 * {@link Collection}.
	 *
	 * @return a movable bidirectional iterator on the element in this set.
	 */

	@Override
	KEY_MOVE_BIDI_ITERATOR KEY_GENERIC iterator();
}
