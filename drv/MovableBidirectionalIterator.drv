/*
 * Copyright (C) 2002-2023 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package PACKAGE;

import it.unimi.dsi.fastutil.MovableBidirectionalIterator;
#if KEYS_PRIMITIVE
import it.unimi.dsi.fastutil.objects.ObjectMovableBidirectionalIterator;
#endif

/** A type-specific movable bidirectional iterator; provides an additional method to avoid
 * (re)creation iterator then it need to be moved forward or backwards.
 *
 * @see MovableBidirectionalIterator
 */

#if KEYS_PRIMITIVE
public interface KEY_MOVE_BIDI_ITERATOR KEY_GENERIC extends KEY_BIDI_ITERATOR KEY_GENERIC, ObjectMovableBidirectionalIterator<KEY_GENERIC_CLASS> {
#else
public interface KEY_MOVE_BIDI_ITERATOR KEY_GENERIC extends KEY_BIDI_ITERATOR KEY_GENERIC, MovableBidirectionalIterator<KEY_GENERIC_CLASS> {
#endif

#if KEYS_PRIMITIVE

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	default void move(final KEY_GENERIC_CLASS fromElement) { move((KEY_GENERIC_TYPE) fromElement); }

    /** Moves back or forward to the elements in the collection,
     * starting from a given element of the domain.
     *
     * <p>This method moves an iterator to the specified starting point.
     * The starting point is any element comparable to the elements of the collection
     * (even if it does not actually belong to the collection).
     * The next element of the returned iterator is the least element of
     * the collection that is greater than the starting point (if there are no
     * elements greater than the starting point, {@link
     * it.unimi.dsi.fastutil.BidirectionalIterator#hasNext() hasNext()} will return
     * {@code false}). The previous element of the returned iterator is
     * the greatest element of the collection that is smaller than or equal to the
     * starting point (if there are no elements smaller than or equal to the
     * starting point, {@link it.unimi.dsi.fastutil.BidirectionalIterator#hasPrevious()
     * hasPrevious()} will return {@code false}).
     *
     * @param fromElement an element to start from.
     * @throws UnsupportedOperationException if the collection does not support move at iterator.
     */
	void move(final KEY_GENERIC_TYPE fromElement);
#endif
}
